#!/usr/bin/env python

import argparse
from AeViz.simulation.simulation import Simulation
from AeViz.utils.utils import time_array

parser = argparse.ArgumentParser()
parser.add_argument('--sim-name', type=str, required=True,
                    help="Name of the simulation of which postprocessing ' \
                        'will be done.")
parser.add_argument('--sim-path', type=str, default=None, required=False,
                    help="Path of the simulation.")
parser.add_argument('--noprofiles', action='store_true', default=False, 
                    required=False, help="Ye, T, s, Fconv profiles are not " \
                        "calculated.")
parser.add_argument('--noGWs', action='store_true', default=False,
                    required=False, help="GWs postprocessing is not " \
                        "calculated.")
parser.add_argument('--plot', action='store_true', default=False,
                    required=False, help="Plots are created.")
parser.add_argument('--tob', default=None, type=float, required=False,
                    help="Sets the time of bounce manually and stores it into \
                        a file")

args = parser.parse_args()
sim = Simulation(args.sim_name, args.sim_path)
if args.tob:
    import numpy as np
    import os
    sim.tob = args.tob
    np.savetxt(os.path.join(sim.storage_path, 'tob.dat'), np.array([args.tob]))
time_array(sim)
sim.PNS_radius()
sim.shock_radius()
sim.neutrino_spheres()
sim.gain_radius()
sim.PNS_mass_ene()
sim.PNS_kick_velocity()
if not args.noprofiles:
    sim.radial_profile('Ye')
if not args.noGWs and sim.dim > 1:
    sim.hydro_strain()
if args.plot:
    from AeViz import ae
    ae.Load(args.sim_name)
    ## EXPLOSION
    ae.shock_radius('all')
    ae.save_plot('shock_radius')
    ae.Close()
    ae.explosion('all')
    ae.save_plot('explosion')
    ae.Close()
    ## GAIN REGION
    ae.gain_radius('all')
    ae.gain('all')
    ae.save_plot('gain')
    ae.Close()
    ## NEUTRINOS
    ae.neutrino_spheres('all')
    ae.save_plot('neutrino_spheres')
    ae.Close()
    ae.nu_integrated('all', 'lum')
    ae.nu_integrated('all', 'ene')
    ae.save_plot('neutrinos')
    ae.Close()
    ## PNS
    ae.PNS_radius('all')
    ae.PNS('mass')
    ae.PNS('ene')
    ae.PNS('kin')
    ae.save_plot('PNS_ME')
    ae.Close()
    ae.PNS('mag')
    ae.PNS('rot')
    ae.PNS('grav')
    ae.PNS('conv')
    ae.save_plot('PNS_E')
    ae.Close()
    ae.PNS_angular_mom('all')
    ae.save_plot('PNS_L')
    ae.Close()
    ## INNERCORE
    ae.innercore_radius('all')
    ae.innercore('mass')
    ae.innercore('ene')
    ae.save_plot('innercore_ME')
    ae.Close()
    ae.innercore('kin')
    ae.innercore('mag')
    ae.innercore('rot')
    ae.innercore('grav')
    ae.save_plot('innercore_E')
    ae.Close()
    ## KICK VELOCITY
    ae.kick_velocity()
    ae.save_plot('kick_velocity')
    ae.Close()
    if not args.noprofiles:
        ## PROFILES
        ae.BV_frequency(projection='2D', plane='time')
        ae.save_plot('BV_frequency')
        ae.Close()
        ae.Rossby_number(projection='2D', plane='time')
        ae.save_plot('Rossby_number')
        ae.Close()
        ae.temperature(projection='2D', plane='time')
        ae.save_plot('temperature')
        ae.Close()
        ae.entropy(projection='2D', plane='time')
        ae.save_plot('entropy')
        ae.Close()
        ae.Ye(projection='2D', plane='time')
        ae.save_plot('Ye')
        ae.Close()
        ae.convective_flux(plane='time')
        ae.save_plot('convective_flux')
        ae.Close()
        ae.gas_pressure(projection='2D', plane='time')
        ae.save_plot('gas_pressure')
        ae.Close()
        ae.rho(projection='2D', plane='time')
        ae.save_plot('rho')
        ae.Close()
    ## GWs
    if sim.dim > 1:
        ae.GWs('all')
        ae.save_plot('GWs')
        ae.Close()
        ae.GWs('all', False, True)
        ae.save_plot('GWs_spectrogram')
        ae.Close()
        if not args.noGWs:
            if sim.dim == 2:
                ae.GWs('h+eq', True, False)
                ae.save_plot('GWs_decomposition_h+eq')
                ae.Close()
            else:
                for strain in ['h+eq', 'h+pol', 'hxeq', 'hxpol']:
                    ae.GWs(strain, True, False)
                    ae.save_plot('GWs_decomposition_' + strain)
                    ae.Close()
    
    
    
    