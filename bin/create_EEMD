#!/usr/bin/env python
from PyEMD import EEMD
import numpy as np
from AeViz.simulation.simulation import Simulation
from AeViz.utils.EMD_utils import (polish_signal, remove_residuals,
                                   save_IMFs, compact_IMFs)
import argparse
import os


parser = argparse.ArgumentParser()
parser.add_argument('--sim-name', type=str, required=True,
                    help='Name of the simulation')
parser.add_argument('--sim-path', type=str, default=None,
                    help='Path to the simulation')
parser.add_argument('--nres', type=int, default=1000000,
                    help='Number of total realizations to generate')
parser.add_argument('--nsplits', type=int, default=5,
                    help='Number for which to split the realizations')
parser.add_argument('--sigma', type=float, default=1,
                    help='Standard deviation of the noise')
parser.add_argument('--nprocs', type=int, default=2,
                    help='Number of processes to use')
parser.add_argument('--seed', type=int, nargs='+', default=None,
                    help="Seed for the noise genrator. '\
                        'Len MUST be equal to the number of slits")
parser.add_argument('--start-time', type=float, default=-0.02,
                    help='Start time for the strain, default is -0.02 s')
parser.add_argument('--end-time', type=float, default=None,
                    help='End time for the strain, default is None. ' + \
                    'Removes the last 20 points of the strain')
parser.add_argument('--remove-residual', action='store_true',
                    help='Remove the residual from the strain')
parser.add_argument('--cut-freq', type=float, default=None,
                    help='Cut frequency for the high frequency noise')
parser.add_argument('--strain', type=str, default='h+eq',
                    help='Which strain to process in case of 3D simulations.' + \
                    'Default is h+eq. Other options are h+pol, hxeq, hxpol')
parser.add_argument('--max-imf', type=int, default=10,
                    help='Maximum number of IMFs to generate')

args = parser.parse_args()

## LOAD THE SELECTED SIMULATION
sim = Simulation(args.sim_name, args.sim_path)
## LOAD THE STRAIN
GWs = sim.GW_Amplitudes()

## CUT THE STRAIN
if args.end_time is not None:
    tend = np.argmax(GWs[:, 0] >= args.end_time)
    GWs = GWs[:tend, :]
else:
    GWs = GWs[:-20, :]

GWs, args.cut_freq = polish_signal(GWs, args.cut_freq)

if args.start_time is not None:
    tstart = np.argmax(GWs[:, 0] >= args.start_time)
    GWs = GWs[tstart:, :]

## REMOVE THE RESIDUAL
if args.remove_residual:
    GWs = remove_residuals(GWs)

## SET THE PARAMETERS
nres = int(np.ceil(args.nres / args.nsplits))

## CHCK THE NAME
if args.strain not in ['h+eq', 'h+pol', 'hxeq', 'hxpol']:
    args.strain = 'h+eq'

if sim.dim == 2:
    args.strain = 'h+eq'

## CREATE FOLDER
if not os.path.exists(os.path.join(sim.storage_path, 'EEMD')):
    os.mkdir(os.path.join(sim.storage_path, 'EEMD'))
    start = 0
else:
    files = os.listdir(os.path.join(sim.storage_path, 'EEMD'))
    files = [f for f in files if 'IMFs' in f]
    files = [f for f in files if args.strain in f]
    if len(files) == 0:
        start = 0
    else:
        files = [int(f.split('_')[-1].split('.')[0]) for f in files]
        start = max(files) + 1

## SET THE PARAMETERS
nres = int(np.ceil(args.nres / args.nsplits))

args.nres = nres

time = GWs[:, 0]
if args.strain == 'h+eq':
    strain = GWs[:, 1]
elif args.strain == 'h+pol':
    strain = GWs[:, 2]
elif args.strain == 'hxeq':
    strain = GWs[:, 3]
elif args.strain == 'hxpol':
    strain = GWs[:, 4]

for res in range(start, args.nsplits):
    ## SET THE NOISE SEED
    if args.seed is not None:
        nseed = args.seed[res]
    else:
        nseed = np.random.randint(100000)
    args.nseed = nseed
    ## INITIALIZE THE EEMD
    eemd = EEMD(trials=nres, noise_width=args.sigma, parallel=True,
                processes=args.nprocs, DTYPE=np.float16, spline_kind='akima',
                separate_trends=True)
    eemd.noise_seed(nseed)
    eemd.eemd(strain, time, max_imf=args.max_imf, progress=True)
    IMFs, residue = eemd.get_imfs_and_residue()
    ## SAVE THE IMFS
    save_IMFs(res, os.path.join(sim.storage_path, 'EEMD'),
              time, IMFs, residue, args)
    print('Saving %d realizations' % nres)
    
compact_IMFs(sim.storage_path, args.strain, files)