#!/usr/bin/env python

import argparse
from AeViz.simulation import Simulation
from AeViz.units.constants import constants as c
from AeViz.units import u
import h5py, os
import numpy as np

parser = argparse.ArgumentParser()
parser.add_argument('--sim-name', type=str, required=True,
                    help="Name of the simulation of which postprocessing ' \
                        'will be done.")
parser.add_argument('--sim-path', type=str, default=None, required=False,
                    help="Path of the simulation.")
parser.add_argument('--tob', default=None, type=float, required=False,
                    help="Sets the time of bounce manually and stores it into \
                        a file")
parser.add_argument('--last-cell', type=str, default='shock',
                    help="Sets the last cell of the analysis")
args = parser.parse_args()
sim = Simulation(args.sim_name, args.sim_path)
if args.tob:
    import numpy as np
    import os
    sim.tob = args.tob
    np.savetxt(os.path.join(sim.storage_path, 'tob.dat'), np.array([args.tob]))

## Get the profiles needed for running GREAT
rho = sim.radial_profile('rho', tob_corrected=False)
time = rho.time
radius = rho.radius
rho = rho.data * c.G / c.c ** 2
BV = sim.radial_profile('BV_frequency').data / c.c ** 2
csound = sim.radial_profile('soundspeed').data ** 2 / c.c ** 2
p = sim.radial_profile('gas_pressure').data.to(u.g/u.s**2/u.cm) * c.G / c.c ** 4
eps = sim.radial_profile('specific_internal_energy').data / c.c ** 2
lapse = sim.radial_profile('lapse_function').data

## Select the radius index
if args.last_cell == 'shock':
    rr = sim.shock_radius(rad='avg')
elif args.last_cell == 'PNS':
    rr = sim.PNS_radius(rad='avg')
elif args.last_cell == 'innercore':
    rr = sim.innercore_radius(rad='avg')
else:
    raise TypeError("Not recognized")

indices = np.argmax(radius[:, None] >= rr[None, :], axis=0)
path = os.path.join(sim.storage_path, 'GREAT_profiles.h5')

with h5py.File(path, 'w') as f:
    f.create_dataset('radius', data=radius.value)
    f.create_dataset('time', data=time.value)
    f.create_dataset('density', data=rho.value)
    f.create_dataset('BV', data=BV.value)
    f.create_dataset('soundspeed2', data=csound.value)
    f.create_dataset('pressure', data=p.value)
    f.create_dataset('internal_energy', data=eps.value)
    f.create_dataset('lapse', data=lapse.value)
    f.create_dataset('iR', data=indices, dtype=int)
    
print("GREAT creation!")
