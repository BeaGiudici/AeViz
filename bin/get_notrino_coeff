#!/usr/bin/env python

import argparse
from AeViz.simulation import Simulation
import numpy as np
import matplotlib.pyplot as plt
import warnings
from matplotlib.lines import Line2D
import os

SPECIES = ['nue', 'nua', 'nux']
COLOURS = ['red', 'blue', 'black']
PERC_RNEU = 1.0
TLIM = 0.05

warnings.filterwarnings("ignore")
parser = argparse.ArgumentParser()
parser.add_argument('--sim-name', required=True, type=str, \
                    help ='Name of the simulation')
parser.add_argument('--sim-path', type=str, default=None, required=False,
                    help="Path of the simulation.")
parser.add_argument('--time', required=True, type=float, \
            help='Time at which you want to start using NOTRINO (in seconds)')
parser.add_argument('--dt', type=float, default=0.001, \
        help='Time Tipestep for saving the neutrino information (in seconds)')
parser.add_argument('--show', action='store_true', default=False, \
                    help='Pop out the plot?')
parser.add_argument('--model', required=True, type=int, \
                    help='model 1: absorption and transport opacities\n' \
                    'model 2: absorption and scattering opacities')

args = parser.parse_args()

TIMES = np.arange(args.time - TLIM, args.time + args.dt, args.dt, dtype=float)

# Open the simulation
m = Simulation(args.sim_name, args.sim_path)
if args.time > m.time(-1).value:
  raise ValueError('The choice of time has to be lower (Remember, remember, the postbounce time...)')
r = m.cell.radius(m.ghost) # Radius of the simulation
dr = m.cell.radius_right(m.ghost) - m.cell.radius_left(m.ghost)
dV = m.cell.dVolume_integration(m.ghost)
neu_sph = m.neutrino_spheres(rad='min')

E_bin_sum = np.nansum(m.cell.E_nu() * m.cell.dE_nu())

# Define arrays to store the data
B0 = np.zeros(3)
B1 = np.zeros(3)

print('You will restart from file %s' % m.find_file_from_time(args.time))
print('Radial average up to %.2f of neutrinosphere' % PERC_RNEU)
print('Time average between %.3f s and %.3f s' % (args.time - TLIM, args.time))

# Save the position of the neutirnospheres of the different flavours
# for the remapping times
k_neu = {
  'nue' : 0,
  'nua' : 0,
  'nux' : 0
}

# Set up the figure
fig, ax = plt.subplots()
ax.set_yscale('log')
ax.set_xscale('log')
ax.set_xlabel('Radius [cm]')
ax.set_ylabel(r'$B_{\nu}$')
ax.text(0.1, 0.9, '%.3f s' % args.time, transform = ax.transAxes)

for time in TIMES:
  time = float(time)
  T = m.temperature(time)
  rho = m.rho(time)
  Xn = m.neutron_fraction(time)
  Xp = m.proton_fraction(time)
  Ye = m.Ye(time)
  X = [Xn, Xp, Ye]

  # Absorption/emission opacity
  ka = m.neutrino_absorption_opacity(time)
  if args.model == 1:
    # Transport opacity
    k_op = m.neutrino_transport_opacities(time)
  elif args.model == 2:
    # Scattering opacity
    k_op = m.neutrino_scattering_opacities(time)
  else:
    raise ValueError('Sorry, not a valid choice for NOTRINO model. It must be 1 or 2.')

  for (i_species, species) in enumerate(SPECIES):
    # Getting the position of the neutirnosphere at given time for the 
    # given neutrino species
    it = np.argwhere(neu_sph[species].time == m.time(time))[0][0]
    neu_sph_radius = neu_sph[species].data[it]
    # Getting the index corresponding to the position
    k = np.argmin(np.abs(r - PERC_RNEU * neu_sph_radius))
    k_ns = np.argmin(np.abs(r - neu_sph_radius))
    k_neu[species] = int(k)
    # Absorption calculations
    # Averaging the opacities over the energy bins
    ka_mean = np.nansum(ka[i_species] * m.cell.E_nu()[None,:] * \
                          m.cell.dE_nu()[None,:], axis = -1) / E_bin_sum
    if species == 'nux':
      # In this case, B0 is computed differently
      B0_loc = ka_mean / (np.sqrt(rho * 1.e-10) * \
                              (np.maximum(T, T[k_ns]) ** 3) * \
                              X[i_species])
    else:
      B0_loc = ka_mean / ((rho * 1e-10) * \
                              (np.maximum(T, T[k_ns]) ** 2) * \
                              X[i_species])
    B0_loc_avg = np.nansum(B0_loc[:k,...] * dV[:k,...] * rho[:k, ...]) / \
                    np.nansum(dV[:k,...] * rho[:k, ...])
    B0[i_species] += B0_loc_avg

    if m.dim == 1:
      k_op_r = k_op[i_species]
    else:
      k_op_r = k_op[i_species][...,0]
  
    k_mean = np.nansum(k_op_r * m.cell.E_nu()[None,:] * \
                          m.cell.dE_nu()[None,:], axis = -1) / E_bin_sum
      
    B1_loc = k_mean / ((rho * 1.e-10) * (np.maximum(T, T[k_ns]) ** 2) * \
                              (Xn + Xp))

    B1_loc_avg = np.nansum(B1_loc[:k,...] * dV[:k, ...] * rho[:k, ...]) / \
                    np.nansum(dV[:k, ...] * rho[:k, ...])
    B1[i_species] += B1_loc_avg
       
    if (time == TIMES[1]):
      if m.dim > 1:
        B0_loc = np.nansum(B0_loc[:k,...] * dV[:k,...] * rho[:k, ...], axis=0) / \
                   np.nansum(dV[:k,...] * rho[:k, ...], axis=0)
        B1_loc = np.nansum(B1_loc[:k,...] * dV[:k,...] * rho[:k, ...], axis=0) / \
                    np.nansum(dV[:k,...] * rho[:k, ...], axis=0)
      ax.plot(r.value[:k_ns], B0_loc.value[:k_ns], color = COLOURS[i_species], ls='-')
      ax.plot(r.value[:k_ns], B1_loc.value[:k_ns], color = COLOURS[i_species], \
              ls='--')
      ax.plot(r.value[k], B0_loc.value[k], color = COLOURS[i_species], \
              marker='o')
      ax.plot(r.value[k], B1_loc.value[k], color = COLOURS[i_species], \
              marker='o')

# Printing neutrino-spheres radii at the final time
print('Neutrinosphere radius for nue: %.2e cm' % neu_sph['nue'].data[it])
print('Neutrinosphere radius for nua: %.2e cm' % neu_sph['nua'].data[it])
print('Neutrinosphere radius for nux: %.2e cm' % neu_sph['nux'].data[it])
print('Neutrinosphere temperature: %.2e MeV' % T[k_neu['nue']].max())

B0 /= TIMES.shape[0]
B1 /= TIMES.shape[0]

print('\nPrint the whole namelist for NOTRINO ->')
print(' &NOTRINOPARS')
print(' NOTRINO_FLAG    = T,')
print(' LAPSE = T,')
print(' LORENTZ = T,')
print(' OPMOD   =           %d,' % args.model)
print(' OPAC_MINDEN     =  0.000000000000000E+000,')
print(' JANKA2001A_KAENUE_COEFF = %.15e,' % B0[0])
print(' JANKA2001A_KAENUA_COEFF = %.15e,' % B0[1])
print(' JANKA2001A_KAENUX_COEFF = %.15e,' % B0[2])
print(' JANKA2001A_KTRNUE_COEFF = %.15e,' % B1[0])
print(' JANKA2001A_KTRNUA_COEFF = %.15e,' % B1[1])
print(' JANKA2001A_KTRNUX_COEFF = %.15e,' % B1[2])
print(' JANKA2001A_TMIN =   %.14f     ,' % T[k_neu['nue']].max())
print(' JANKA2001B_KAENUE_COEFF = %.15e,' % B0[0])
print(' JANKA2001B_KAENUA_COEFF = %.15e,' % B0[1])
print(' JANKA2001B_KAENUX_COEFF = %.15e,' % B0[2])
print(' JANKA2001B_KSCNUE_COEFF = %.15e,' % B1[0])
print(' JANKA2001B_KSCNUA_COEFF = %.15e,' % B1[1])
print(' JANKA2001B_KSCNUX_COEFF = %.15e,' % B1[2])
print(' JANKA2001B_TMIN =   %.14f     ,' % T[k_neu['nue']].max())
print(' WGHMOD  =           2,')
print(' WGH_TANH_TAU0   =  1.333333333333333     ,')
print(' WGH_FD_DTAU     =   0.25000000000000     ,')
print(' HF      =   1.00000000000000')
print(' /')

ax.set_xlim([r.value[0], 2.0 * np.max([neu_sph['nue'].data[it], \
                                       neu_sph['nua'].data[it], \
                                       neu_sph['nux'].data[it]])])
#ax.set_ylim([1e-13, 1e-5])

#ax.hlines(B0, r.value[0], np.max([neu_sph['nue'].data[it], neu_sph['nua'].data[it], \
#          neu_sph['nux'].data[it]]), ls=':', colors = COLOURS)
#ax.hlines(B1, r.value[0], np.max([neu_sph['nue'].data[it], neu_sph['nua'].data[it], \
#          neu_sph['nux'].data[it]]), ls='-.', colors = COLOURS)

handles = [
  Line2D([0], [0], color='red', ls='', marker='o', label=r'$\nu_\mathrm{e}$'), \
  Line2D([0], [0], color='blue', ls='', marker='o', label=r'$\bar{\nu}_\mathrm{e}$') , \
  Line2D([0], [0], color='black', ls='', marker='o', label=r'$\nu_\mathrm{x}$'), \
  Line2D([0], [0], color='grey', ls='-', label=r'$B_0$'),  \
  Line2D([0], [0], color='grey', ls='--', label=r'$B_1$')#, \
  #Line2D([0], [0], color='grey', ls=':', label=r'$\langle B_0 \rangle$'), \
  #Line2D([0], [0], color='grey', ls='-.', label=r'$\langle B_1 \rangle$')
]
ax.legend(handles=handles, loc='lower right')

plt.savefig(os.path.join(m.storage_path, 'notrino_coeff.pdf'), \
            bbox_inches='tight')

if args.show:
    plt.show()
